swagger: "2.0"
info:
  title: School Management API
  description: This API is to help schools manage the students and staff records
  version: 1.0
  contact:
    email: charlesnwoye2@gmail.com
  license:
    name: Apache 2.0
    url: "http://apache.org/"
  servers:
    - url: "http://localhost:4000/"
      description: This is the local server
    - url: "http://ahostedplatforminthefuture.com"
      description: This is the hosted server

schemes: [http, https]

paths:
  /:
    get:
      summary: Returns Hello World
      description: This tests the server
      responses:
        200:
          description: Success
          scema:
            type: string
            example: "a string value"
        400:
        description: Bad request
        500:
          description: Internal Server Error

  /student/:
    get:
      summary: Fetches all students records
      description: This returns all students in the database
      tags:
        - students
      parameters:
        - $ref: "#components/parameters/AccessToken"
      responses:
        200:
          description: Success
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                data:
                  type: array
              example: { status: "SUCCESS", data: [] }
        404:
          description: Failed
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example: { status: "FAILED", message: "Records not found" }

    post:
      summary: Creates a new student profile
      tags:
        - students
      consumes:
        - application/json
      parameters:
        - $ref: "#components/parameters/AccessToken"
        - in: body
          schema:
            $ref: "#components/schemas/Student"
      responses:
        201:
          description: Created
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
                access:
                  type: string
                  description: access token
              example:
                {
                  status: "SUCCESS",
                  access: string,
                  "message": "New Student added successfully!",
                }
        400:
          description: Failed
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example: { status: "FAILED", message: "Passwords do not match" }
        500:
          description: Internal server Error

  /student/{id}:
    get:
      summary: Returns a student's record by ID
      description: This fetches a student's record by the ID
      tags:
        - students
      parameters:
        - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Student's ID
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
            example: { status: "SUCCESS", data: {} }
        404:
          description: Not found
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
            example: { status: "FAILED", message: "student's record not found" }
    delete:
      summary: Deletes a student's record
      tags:
        - students
      parameters:
        - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Student's ID
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example:
            { status: "SUCCESS", message: "student's record deleted successfully" }

components:
  parameters:
    AccessToken:
      name: "x-access-token"
      in: header
      description: Acccess Token
      required: true
      schema:
        type: string
  schemas:
    Student:
      type: object
      required:
        - first
        - last
      properties:
        first:
          type: string
        last:
          type: string
        other:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        gender:
          type: string
        phone:
          type: string
        photo:
          type: string
        dob:
          type: string
