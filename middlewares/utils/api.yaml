swagger: "2.0"
info:
  title: School Management API
  description: This API is to help schools manage the students and staff records
  version: 1.0
  contact:
    email: charlesnwoye2@gmail.com
  license:
    name: Apache 2.0
    url: "http://apache.org/"
  servers:
    - url: "http://localhost:4000/"
      description: This is the local server
    - url: "http://ahostedplatforminthefuture.com"
      description: This is the hosted server

schemes: [http, https]

paths:
  /:
    get:
      summary: Returns Hello World
      description: This tests the server
      responses:
        200:
          description: Success
          scema:
            type: string
            example: "a string value"
        400:
        description: Bad request
        500:
          description: Internal Server Error

  /student/:
    get:
      summary: Fetches all students records
      description: This returns all students in the database
      tags:
        - Students
      security:
        - AccessToken: []
      # parameters:
      #   - $ref: "#components/parameters/AccessToken"
      responses:
        200:
          description: Success
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                data:
                  type: array
              example: { status: "SUCCESS", data: [] }
        404:
          description: Failed
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example: { status: "FAILED", message: "Records not found" }

    post:
      summary: Creates a new student profile
      tags:
        - Students
      security:
        - AccessToken: []
      consumes:
        - application/json
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - in: body
          schema:
            $ref: "#components/schemas/Student"
      responses:
        201:
          description: Created
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
                access:
                  type: string
                  description: access token
              example:
                {
                  status: "SUCCESS",
                  access: string,
                  message: "New Student added successfully!",
                }
        400:
          description: Failed
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example: { status: "FAILED", message: "Passwords do not match" }
        500:
          description: Internal server Error

  /student/{id}:
    get:
      summary: Returns a student's record
      description: This fetches a student's record by the ID
      tags:
        - Students
      security:
        - AccessToken: []
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Student's ID
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
            example: { status: "SUCCESS", data: {} }
        404:
          description: Not found
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
            example: { status: "FAILED", message: "student's record not found" }
    delete:
      summary: Deletes a student's record
      tags:
        - Students
      security:
        - AccessToken: []
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Student's ID
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example:
            {
              status: "SUCCESS",
              message: "student's record deleted successfully",
            }
        404:
          description: Failed
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example: { status: "FAILED", message: "student's record not found" }
    put:
      summary: updates a student's record
      tags:
        - Students
      security:
        - AccessToken: []
      consumes:
        - application/json
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Student's ID
          schema:
            type: string
        - in: body
          schema:
            $ref: "#components/schemas/Student"
      responses:
        200:
          description: Success
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example:
                { status: "SUCCESS", message: "record successfully updated" }
        404:
          description: Failed
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example: { status: "FAILED", message: "student's record not found" }

  # staff section
  /staff/:
    get:
      summary: Returns all staff records
      tags:
        - Staff
      security:
        - AccessToken: []
      # parameters:
      # - $ref: "#components/parameters/AccessToken"
      responses:
        200:
          description: Success
          content:
            schema:
              type: object
              properties:
                status:
                  type: sttring
                data:
                  type: array
              example: { status:"SUCCESS", data: [] }
        400:
          description: Failed
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example: { status: "FAILED", message: "Records not found" }

    post:
      summary: Creates a new staff profile
      tags:
        - Staff
      security:
        - AccessToken: []
      consumes:
        - application/json
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - in: body
          schema:
            $ref: "#components/schemas/Staff"
      responses:
        201:
          description: Created
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
                access:
                  type: string
                  description: access token
              example:
                {
                  status: "SUCCESS",
                  access: string,
                  message: "New Staff added successfully!",
                }
      400:
        description: Failed
        content:
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
            example: { status: "FAILED", message: "Passwords do not match" }
      500:
        description: Internal server Error

  /staff/{id}:
    get:
      summary: Returns a staff's record
      tags:
        - Staff
      security:
        - AccessToken: []
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Staff's ID
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
            example: { status: "SUCCESS", data: {} }
        404:
          description: Not found
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
            example: { status: "FAILED", message: "staff's record not found" }

    put:
      summary: updates a staff's record
      tags:
        - Staff
      consumes:
        - application/json
      security:
        - AccessToken: []
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Staff's ID
          schema:
            type: string
        - in: body
          schema:
            $ref: "#components/schemas/Staff"
      responses:
        200:
          description: Success
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example:
                { status: "SUCCESS", message: "record successfully updated" }
        404:
          description: Failed
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example: { status: "FAILED", message: "staff's record not found" }

    delete:
      summary: Deletes a staff's record
      tags:
        - Staff
      security:
        - AccessToken: []
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Staff's ID
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example:
            {
              status: "SUCCESS",
              message: "staff's record deleted successfully",
            }
        404:
          description: Failed
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example: { status: "FAILED", message: "staff's record not found" }

  # class section
  /class/:
    get:
      summary: Returns all classes record
      tags:
        - Classes
      security:
        - AccessToken: []
      # parameters:
      # - $ref: "#components/parameters/AccessToken"
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
            example:
              {
                status: "SUCCESS",
                data: [],
                message: "fetched records succeesfully",
              }
    post:
      summary: Creates a new class
      tags:
        - Classes
      security:
        - AccessToken: []
      consumes:
        - application/json
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - in: body
          schema:
            $ref: "#components/schemas/Class"
      responses:
        201:
          description: Created
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
                data:
                  type: object
              example: { status: "SUCCESS", data: {}, message: "Class created" }
        400:
          description: Failed
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example: { status: "FAILED", message: "Class already exists!" }

  /class/{id}:
    get:
      summary: Returns a class' record
      tags:
        - Classes
      security:
        - AccessToken: []
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: class name
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
            example:
              {
                status: "SUCCESS",
                data: {},
                message: "record fetched successfully",
              }
        404:
          description: Not found
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
            example: { status: "FAILED", message: "record not found" }
    put:
      summary: updates a class info
      tags:
        - Classes
      security:
        - AccessToken: []
      consumes:
        - application/json
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Class' name
          schema:
            type: string
        - in: body
          schema:
            $ref: "#components/schemas/Class"
      responses:
        200:
          description: Success
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example:
                { status: "SUCCESS", message: "record updated", data: {} }
        404:
          description: Failed
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example: { status: "FAILED", message: "record not found" }

    delete:
      summary: Deletes a class' record
      tags:
        - Classes
      security:
        - AccessToken: []
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: id
          in: path
          required: true
          description: Class' name
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example: { status: "SUCCESS", message: "record deleted successfully" }
        404:
          description: Failed
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
          example: { status: "FAILED", message: "record not found" }

  # course section
  /course/:
    get:
      summary: Returns all courses records
      tags:
        - Courses
      security:
        - AccessToken: []
      # parameters:
      # - $ref: "#components/parameters/AccessToken"
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
            example:
              {
                status: "SUCCESS",
                data: [],
                message: "fetched records succeesfully",
              }
        500:
          description: failed
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
            example: { status: "FAILED", message: "failed to fetch records" }
    post:
      summary: Creates a new course
      tags:
        - Courses
      security:
        - AccessToken: []
      consumes:
        - application/json
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - in: body
          schema:
            $ref: "#components/schemas/Course"
      responses:
        201:
          description: Created
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
                data:
                  type: object
              example:
                { status: "SUCCESS", data: {}, message: "Course created" }
        400:
          description: Failed
          content:
            schema:
              type: object
              properties:
                status:
                  type: string
                message:
                  type: string
              example: { status: "FAILED", message: "Course already exists!" }
        500:
          description: failed
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
            example: { status: "FAILED", message: "Internal server error" }

    /course/{id}:
      get:
      summary: Returns a course
      tags:
        - Classes
      security:
        - AccessToken: []
      parameters:
        # - $ref: "#components/parameters/AccessToken"
        - name: code
          in: path
          required: true
          description: course code
          schema:
            type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              status:
                type: string
              data:
                type: object
            example:
              {
                status: "SUCCESS",
                data: {},
                message: "record fetched successfully",
              }
        404:
          description: Not found
          schema:
            type: object
            properties:
              status:
                type: string
              message:
                type: string
            example: { status: "FAILED", message: "course not found" }
        500:
          description: Internal server error

components:
  parameters:
    AccessToken:
      name: "x-access-token"
      in: header
      description: Acccess Token
      required: true
      schema:
        type: string
  schemas:
    Student:
      type: object
      required:
        - first
        - last
        - other
        - email
        - password
        - confirmPassword
        - gender
        - phone
        - photo
        - dob
      properties:
        first:
          type: string
        last:
          type: string
        other:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        gender:
          type: string
        phone:
          type: string
        photo:
          type: string
        dob:
          type: string

    Staff:
      type: object
      required:
        - first
        - last
        - other
        - email
        - password
        - confirmPassword
        - gender
        - phone
        - photo
      properties:
        first:
          type: string
        last:
          type: string
        other:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        gender:
          type: string
        phone:
          type: string
        photo:
          type: string
        is_admin:
          type: boolean

    Class:
      type: object
      required:
        - name
        - subjects
        - teacher_id
      properties:
        name:
          type: string
        subjects:
          type: array
        teacher_id:
          type: string

    Course:
      type: object
      required:
        - title
        - course_code
        - teacher_id
      properties:
        title:
          type: string
        course_code:
          type: string
        teacher_id:
          type: string

securityDefinitions:
  AccessToken:
    name: x-access-token
    in: header
    description: Acccess Token
    required: true
    type: apiKey

security:
  - AccessToken: []
